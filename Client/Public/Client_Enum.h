#pragma once

namespace Client
{
	enum LEVELID	{ LEVEL_STATIC, LEVEL_WORLD, LEVEL_TEMPLE_LION, LEVEL_STRONGHOLD_ABYSSMAGE, LEVEL_QUEST, LEVEL_STORMTERROR, LEVEL_LOADING, LEVEL_END };
	enum COLLID { 
		COLL_PLAYER_BODY, COLL_PLAYER_WEAPON, COLL_PLAYER_SKILL, 
		COLL_MONSTER_BODY, COLL_MONSTER_WEAPON, COLL_MONSTER_SKILL, 
		COLL_NPC_BODY, 
		COLL_SPAWN_CREATURE, COLL_EVENTREACT_PLAYER, 
		COLL_UPDRAFT, COLL_GATE, COLL_LOWEST_FLOOR,
		COLL_END };

	enum UI_PAGE	{ PAGE_MAIN,PAGE_PAIMON, PAGE_GACHA, PAGE_GACHA_RESULT, PAGE_INVEN, PAGE_DIALOGUE, PAGE_SHOP,PAGE_QUEST,PAGE_ALCHEMY,PAGE_COOK,PAGE_CHAR,PAGE_MAP,PAGE_TEAM,PAGE_END};

	enum ELEMENT { ELEMENT_NONE, ELEMENT_FIRE, ELEMENT_WATER, ELEMENT_WIND, ELEMENT_ELECTRIC, ELEMENT_FROST, ELEMENT_EARTH, ELEMENT_END };

	enum ELEMENTAL_REACTION { 
		/* 증폭 반응 : 증발, 융해 */
		REACT_VAPORIZE, REACT_VAPORIZE_REVERSE, 
		REACT_MELT,REACT_MELT_REVERSE,
		/* 격변 반응 : 과부하, 확산, 초전도, 감전, 빙결 */
		REACT_OVERLOADED, 
		REACT_SWIRL_FIRE, REACT_SWIRL_WATER, REACT_SWIRL_ELECTRIC, REACT_SWIRL_FROST,
		REACT_SUPERCONDUCT, 
		REACT_ELECTROCHARGED, 
		REACT_FROZEN,
		/* 결정 */
		REACT_CRYSTALLIZE_FIRE, REACT_CRYSTALLIZE_WATER, REACT_CRYSTALLIZE_ELECTIRC, REACT_CRYSTALLIZE_FROST,
		REACT_END
	};
	
	enum INTERACTION_ICON { ICON_TALK, ICON_ITEM, ICON_END};

	enum CREATUREID {	/* PAIMON까지 순서 바꾸지 말 것 (RAMPTEX) */
		CHARACTER_TRAVELER,
		CHARACTER_BARBARA, CHARACTER_DILUC, CHARACTER_RAIDEN, CHARACTER_ZHONGLI,
		NPC_PAIMON, NPC_KATHERYNE,
		MONSTER_CHUCHU,
		MONSTER_ANDRIUS, 
		MONSTER_SLIME_WATER, MONSTER_SLIME_ICE,
		MONSTER_HILI_NORMAL,
		MONSTER_BRUTE_SHIELD,
		MONSTER_BRUTE_AXE,
		MONSTER_EFFIGY_FIRE,
		MONSTER_DVALIN,
		MONSTER_ABYSS_MAGE_ELEC,
		MONSTER_ABYSS_MAGE_ICE,
		MONSTER_ABYSS_MAGE_WATER,
		MONSTER_ABYSS_MAGE_FIRE,
		NPC_AMBOR,
		NPC_SWAN, NPC_LAWRENCE, NPC_GUY, NPC_MILES, NPC_RAYMOND, /* knights */
		NPC_JILLIANA, /* Church */
		NPC_JACK, NPC_LYNN, NPC_PALLAD, NPC_STANLEY, /* Adventure */
		NPC_ALBERT, NPC_ANNA, NPC_ANTHONY, NPC_BEATRICE, NPC_BLANCHE, NPC_CHARLES, /* Castle */
		NPC_DONNA, NPC_EURY, NPC_GLORY, NPC_MARGARET, NPC_MARJORIE, NPC_NORMA, NPC_QUINN,
		NPC_SANSA, NPC_SARA, NPC_SUSIE, NPC_WAGNER, NPC_ARAMIS, NPC_MICHELLE, NPC_SCHULZ, NPC_TIMAEUS,
		TELEPORT,
		CREATURE_END
	};

	enum NPCID { /* 공통NPC 행동 분류 */
		NPC_STANDBY,
		NPC_PRAY,
		NPC_CLAP,
		NPC_SOLIDER,
		NPC_SIT,
		NPC_AKIMBO,
		NPC_HOLDARMHAND,
		NPC_HOLDARM,
		NPC_TALK1,
		NPC_TALK2,
		NPC_TALK3,
		NPC_REQUEST,
		NPC_KNIGHTS,
		NPC_WALK_STRAIGHT,
		NPC_END
	};

	enum CAMSCENEID {
		CAMSCENEID_CHANGE,
		CAMSCENEID_DILUC,
		CAMSCENEID_ZHONGLI,
		CAMSCENEID_BARBARA,
		CAMSCENEID_RAIDEN,
		CAMSCENEID_ANDRIUS,
		CAMSCENEID_BASICTALK,
		CAMSCENEID_AMBORTALK,
		CAMSCENEID_GATE,
		CAMSCENEID_DUNGEONDOOR,
		CAMSCENEID_DVALIN,
		CAMSCENEID_END
	};

	enum CREATURETYPE {
		CTY_PLAYER, CTY_MONSTER, CTY_NPC, CTY_END
	};

	enum HILI_TYPE { HILI_NORMAL, HILI_DANCE, HILI_SIT, HILI_SLEEP, HILI_END };

	enum PLAYERINDEX { PLAYER_ONE, PLAYER_TWO, PLAYER_THREE, PLAYER_FOUR, PLAYER_END };

	enum SKILLID {
		SKILL_ICECONE,
		SKILL_END
	};

	enum SCENEID {
		SCENE_ONE, SCENE_TWO, SCENE_THREE, SCENE_FOUR, SCENE_FIVE, SCENE_SIX, SCENE_SEVEN, SCENE_END
	};

	enum FACEID {
		FACE_TRAVELER		= -1,
		FACE_BARBARA		= 6,
		FACE_DILUC			= 5,
		FACE_RAIDEN			= 6,
		FACE_ZHONGLI		= 6,
		FACE_PAIMON			= 4,
		FACE_SLIME_WATER	= 2,
		FACE_END			= -1
	};

	enum FACEEYEID {
		FACEEYE_TRAVELER = -1,
		FACEEYE_BARBARA = 7,
		FACEEYE_DILUC = 6,
		FACEEYE_RAIDEN = 7,
		FACEEYE_ZHONGLI = 7,
		FACEEYE_PAIMON = -1,
		FACEEYE_SLIME_WATER = 2,
		FACEEYE_END = -1
	};

	enum WEAPONID {
		WEAPON_WOLFMOUND,
		WEAPON_KUNWU,
		WEAPON_ZEPHYRUS,
		WEAPON_NARUKAMI,
		WEAPON_ICECONE,
		WEAPON_CLUB,
		WEAPON_SHIELD,
		WEAPON_AXE,
		WEAPON_STAFF_ELEC,
		WEAPON_STAFF_ICE,
		WEAPON_STAFF_WATER,
		WEAPON_STAFF_FIRE,
		WEAPON_END
	};

	enum GLIDERID {
		GLIDER_ORIGIN,
		GLIDER_LIYUE,
		GLIDER_PSALMUS,
		GLIDER_THUNDERCLAP,
		GLIDER_END
	};

	enum EFFECTID {
		EFFECT_FLAME,
		EFFECT_HITTING_STAR,
		EFFECT_HITTING_CIRCLE,
		EFFECT_ICE_FLOOR_ICECONE,
		EFFECT_ICE_FLOOR_SHOCKWAVE,
		EFFECT_FOG,
		EFFECT_PILLAR_WAVE,
		EFFECT_FLAME0,
		EFFECT_FLAME1,
		EFFECT_FLAME2,
		EFFECT_IMPACT_SINGLE,
		EFFECT_IMPACT_RADIAL,
		EFFECT_IMPACT_PLANE,
		EFFECT_IMPACT_PLANE_SEQUENCE,
		EFFECT_IMPACT_PLANE_CIRCULAR,
		EFFECT_IMPACT_WATER_SPLASH,
		EFFECT_ETC,
		EFFECT_END
	};

	enum SKILLOBJID {
		SKILLOBJ_ICECONE,
		SKILLOBJ_ICESHOCKWAVE,
		SKILLOBJ_ICEPILLAR,
		SKILLOBJ_WINDBLADE,
		SKILLOBJ_WINDRANGE_ICECONE,
		SKILLOBJ_WINDRANGE_SWEEP,
		SKILLOBJ_WINDRANGE_JUMP,
		SKILLOBJ_WINDRANGE_JUMP_CENTER,
		SKILLOBJ_WINDRANGE_HOWL,
		SKILLOBJ_WINDRANGE_HAIL,
		SKILLOBJ_SCRATCH_LEFT,
		SKILLOBJ_SCRATCH_RIGHT,
		SKILLOBJ_SWEEP_LEFT,
		SKILLOBJ_SWEEP_RIGHT,
		SKILLOBJ_ICEPIECE,
		SKILLOBJ_RUSH,
		SKILLOBJ_RUSH2,
		SKILLOBJ_WIND_DEFINED,
		SKILLOBJ_FIRE_CUBE,
		SKILLOBJ_FIRE_PILLAR,
		SKILLOBJ_FIRE_CORE,
		SKILLOBJ_ABYSS_ICECONE,

		SKILLOBJ_END
	};

	enum BARBARA_ATTACK {
		BARBARA_ATK_BASE, BARBARA_ATK_BASE_F, BARBARA_ATK_FORCE, BARBARA_ATK_END
	};

	enum RAIDEN_SKILL {
		RAIDEN_ELEMENTAL_SKILL, RAIDEN_ELEMENTAL_BURST, RAIDEN_ELEMENTAL_END
	};

	enum FSM_OBJECT_STATE {
		FSM_OBJECT_HIT_L,		FSM_OBJECT_HIT_H,		FSM_OBJECT_HIT_THROW,		FSM_OBJECT_END
	};

	enum FSM_STATE {
		FSM_IDLE,		FSM_WALK,		FSM_RUN,		FSM_SPLINT,		FSM_DASH,		FSM_JUMP,
		FSM_WALK_RUN,	FSM_WALK_IDLE,	FSM_RUN_WALK,   FSM_RUN_STOP,	FSM_SPLINT_RUN,

		FSM_SHOW,

		FSM_FLY_START,				FSM_FLY_NORMAL,			FSM_FLY_LEFT,				FSM_FLY_RIGHT,
		FSM_FALL_LOW,							FSM_FALL_HIGH,							FSM_DROP_DOWN,
		FSM_FALL_ATTACK_START1,					FSM_FALL_ATTACK_START2, 
		FSM_FALL_ATTACK,						FSM_FALL_ATTACK_END1,					FSM_FALL_ATTACK_END2,

		FSM_ATTACK_IDLE,
		FSM_ATTACK_READY,						FSM_ATTACK_CHARGED_READY,
		FSM_ATTACK1,	FSM_ATTACK2,	FSM_ATTACK3,	FSM_ATTACK4,	FSM_ATTACK5,	FSM_ATTACK6,
		FSM_ATTACK_CHARGED1,					FSM_ATTACK_CHARGED2,
		FSM_ATTACK_END,							FSM_ATTACK_END2,						FSM_ATTACK_CHARGED_END,

		FSM_ELEMENTAL_SKILL1,					FSM_ELEMENTAL_SKILL2,					FSM_ELEMENTAL_SKILL3,
		FSM_ELEMENTAL_SKILL1_HOLD,
		FSM_ELEMENTAL_SKILL1_IDLE,				FSM_ELEMENTAL_SKILL2_IDLE,				FSM_ELEMENTAL_SKILL3_IDLE,
		FSM_ELEMENTAL_BURST,					FSM_ELEMENTAL_BURST_IDLE,

		FSM_DEAD1,								FSM_DEAD2,

		FSM_HIT_L,		FSM_HIT_H,		FSM_HIT_THROW,		FSM_HIT_THROW_FLY,		FSM_HIT_ROLLING,
		FSM_END
	};

#pragma region Monster FSM
	enum FSM_ANDRIUS_STATE {
		FSM_ANDRIUS_THINK, FSM_ANDRIUS_IDLE, FSM_ANDRIUS_WALK_FIRST,
		FSM_ANDRIUS_WALK_LEFT, FSM_ANDRIUS_WALK_RIGHT, FSM_ANDRIUS_SCRATCH_LEFT,
		FSM_ANDRIUS_SCRATCH_RIGHT, FSM_ANDRIUS_SWEEP_LEFT, FSM_ANDRIUS_SWEEP_RIGHT,
		FSM_ANDRIUS_JUMP, FSM_ANDRIUS_BACKJUMP, FSM_ANDRIUS_RUSH,
		FSM_ANDRIUS_RUSH_READY, FSM_ANDRIUS_TURN_RUSH_LEFT, FSM_ANDRIUS_TURN_RUSH_RIGHT,
		FSM_ANDRIUS_TURN_RUSH_PATTERN_RUSH, FSM_ANDRIUS_TURN_RUSH_PATTERN_JUMP, FSM_ANDRIUS_ICICLESHOOT_RIGHT,
		FSM_ANDRIUS_ICICLESHOOT_LEFT, FSM_ANDRIUS_JUMP_READY_LEFT, FSM_ANDRIUS_JUMP_READY_RIGHT,
		FSM_ANDRIUS_JUMP_READY_FRONT, FSM_ANDRIUS_SCRAM_LEFT, FSM_ANDRIUS_SCRAM_RIGHT,
		FSM_ANDRIUS_TURN_RUSH_SCRAM_LEFT_START, FSM_ANDRIUS_TURN_RUSH_SCRAM_LEFT_ARRIVE,
		FSM_ANDRIUS_TURN_RUSH_SCRAM_RIGHT_START, FSM_ANDRIUS_TURN_RUSH_SCRAM_RIGHT_ARRIVE,
		FSM_ANDRIUS_TURN_RUSH_SCRAM_LEFT_JUMP, FSM_ANDRIUS_TURN_RUSH_SCRAM_RIGHT_JUMP,
		FSM_ANDRIUS_TURN_FAST_LEFT, FSM_ANDRIUS_TURN_FAST_RIGHT,
		FSM_ANDRIUS_TURN180_LEFT, FSM_ANDRIUS_TURN180_RIGHT,

		// Phase 2
		FSM_ANDRIUS_PHAZE2_ENTER_HOWL_START,
		FSM_ANDRIUS_PHAZE2_ENTER_HOWLING,
		FSM_ANDRIUS_PHAZE2_ENTER_HOWL_END,

		FSM_ANDRIUS_ICE_SHOCK_WAVE_READY, FSM_ANDRIUS_ICE_SHOCK_WAVE,
		FSM_ANDRIUS_WIND_SHOCK_WAVE_READY, FSM_ANDRIUS_WIND_SHOCK_WAVE,
		FSM_ANDRIUS_WIND_SCRATCH_LEFT, FSM_ANDRIUS_WIND_SCRATCH_RIGHT,
		FSM_ANDRIUS_ROAR_START, FSM_ANDRIUS_ROARING, FSM_ANDRIUS_ROAR_END,

		FSM_ANDRIUS_IDLE_VARIATION_1,		// 멍멍
		FSM_ANDRIUS_IDLE_VARIATION_2,		// 땅 콩콩
		FSM_ANDRIUS_IDLE_VARIATION_3,		// 멍 부르르
		FSM_ANDRIUS_HAIL_SHAKE_START, FSM_ANDRIUS_HAIL_SHAKING, FSM_ANDRIUS_HAIL_SHAKE_END,
		FSM_ANDRIUS_DEAD_HOWL_START, FSM_ANDRIUS_DEAD_HOWLING,
		FSM_ANDRIUS_END
	};

	enum FSM_SLIME_STATE {
		FSM_SLIME_BORN, FSM_SLIME_WALK, FSM_SLIME_IDLE, FSM_SLIME_TURN,
		FSM_SLIME_HIT_L, FSM_SLIME_HIT_H,
		FSM_SLIME_HIT_THROW_START, FSM_SLIME_HIT_THROW, FSM_SLIME_HIT_THROW_DOWN,
		FSM_SLIME_ATTACK, FSM_SLIME_DIE1, FSM_SLIME_DIE2,
		FSM_SLIME_BREATHATTACK, FSM_SLIME_ALERT, FSM_SLIME_SHIELD_REBORN,
		FSM_SLIME_END
	};

	enum FSM_HILI_STATE {
		FSM_HILI_BORN, FSM_HILI_WALKFORWARD, FSM_HILI_WALKBACK, FSM_HILI_RUN, FSM_HILI_IDLE,
		FSM_HILI_ALERT, FSM_HILI_RUNATTACK_START, FSM_HILI_RUNATTACK, FSM_HILI_RUNATTACK_END,
		FSM_HILI_HIT_L, FSM_HILI_HIT_H,
		FSM_HILI_DIE_1, FSM_HILI_DIE_2,
		FSM_HILI_HIT_THROW_START, FSM_HILI_HIT_THROW, FSM_HILI_HIT_THROW_STAND, FSM_HILI_HIT_THROW_DIE,
		FSM_HILI_DANCE, FSM_HILI_SIT_START, FSM_HILI_SIT, FSM_HILI_SIT_IDLE, FSM_HILI_SIT_STAND,
		FSM_HILI_SLEEP_STAND, FSM_HILI_SLEEP_START, FSM_HILI_SLEEP_1, FSM_HILI_SLEEP_2, FSM_HILI_SLEEP_IDLE,
		FSM_HILI_END
	};

	enum FSM_BRUTE_STATE {
		FSM_BRUTE_SIT_TALK,
		FSM_BRUTE_SLEEP,
		FSM_BRUTE_SIT_IDLE,
		FSM_BRUTE_SIT,
		FSM_BRUTE_STANDUP,
		FSM_BRUTE_KNEEL_AND_NOD,
#pragma region 방패
		// 방패
		FSM_BRUTE_WALK_RIGHT_WITH_SHIELD,
		FSM_BRUTE_WALK_LEFT_WITH_SHIELD,
		FSM_BRUTE_WALK_FORWARD_WITH_SHIELD,
		FSM_BRUTE_WALK_BACKWARD_WITH_SHIELD,
		FSM_BRUTE_TURN_RIGHT_WITH_SHIELD,
		FSM_BRUTE_TURN_LEFT_WITH_SHIELD,
		FSM_BRUTE_THROW_SOMETHING_WITH_SHIELD,
		FSM_BRUTE_PUNCH_WITH_SHIELD,
		FSM_BRUTE_RUSH_LOOP_WITH_SHIELD,
		FSM_BRUTE_START_RUSH_WITH_SHIELD,
		FSM_BRUTE_FINISH_RUSH_WITH_SHIELD,
		FSM_BRUTE_ROAR_AND_SUMMON_SLIME_WITH_SHIELD,
		FSM_BRUTE_IDLE_WITH_SHIELD,
		FSM_BRUTE_HIT_AND_FALL_WITH_SHIELD,
		FSM_BRUTE_HIT_AND_FALLING_WITH_SHIELD,
		FSM_BRUTE_HIT_AND_DIE_WITH_SHIELD,
		FSM_BRUTE_HIT_AND_FLY_WITH_SHIELD,
		FSM_BRUTE_HIT_ON_BACK_WITH_SHIELD,
		FSM_BRUTE_HIT_ON_BACK_STRONGLY_WITH_SHIELD,
		FSM_BRUTE_TURN_OFF_FIRE_SHIELD,
		FSM_BRUTE_BLOCK_AND_COUNTER_WITH_SHIELD,
		FSM_BRUTE_BLOCK_WITH_SHIELD,
		FSM_BRUTE_SUMMON_SHIELD_WITH_SLIME,
#pragma endregion
#pragma region 맨손
		// 맨손
		FSM_BRUTE_WALK_RIGHT_WITH_HANDS,
		FSM_BRUTE_WALK_LEFT_WITHHANDS,
		FSM_BRUTE_WALK_FORWARD_WITH_HANDS,
		FSM_BRUTE_WALK_BACKWARD_WITH_HANDS,
		FSM_BRUTE_TURN_RIGHT_WITH_HANDS,
		FSM_BRUTE_TURN_LEFT_WITH_HANDS,
		FSM_BRUTE_DOUBLE_HAND_HIT_ON_GROUND_WITH_HANDS,
		FSM_BRUTE_THROW_SLIME_WITH_HANDS,
		FSM_BRUTE_ROAR_AND_SWOOP_WITH_HANDS,
		FSM_BRUTE_RUSH_LOOP_WITH_HANDS,
		FSM_BRUTE_START_RUSH_WITH_HANDS,
		FSM_BRUTE_STOP_RUSH_WITH_HANDS,
		FSM_BRUTE_RUN_WITH_HANDS,
		FSM_BRUTE_POWER_UP_WITH_HANDS,
		FSM_BRUTE_POWER_DOWN_WITH_HANDS,
		FSM_BRUTE_JUMP_ATTACK_ON_GROUND_WITH_HANDS,
		FSM_BRUTE_IDLE_WITH_HANDS,
		FSM_BRUTE_HIT_AND_FALL_ON_GROUND_WITH_HANDS,
		FSM_BRUTE_HIT_AND_FALLING_WITH_HANDS,
		FSM_BRUTE_HIT_AND_DIE_WITH_HANDS,
		FSM_BRUTE_HIT_AND_FLY_WITH_HANDS,
		FSM_BRUTE_WEAK_HIT_WITH_HANDS,
		FSM_BRUTE_STRONG_HIT_WITH_HANDS,
		FSM_BRUTE_SWOOP_WITH_HANDS,
		FSM_BRUTE_ATTACK4_WITH_HANDS,	// 철산고
		FSM_BRUTE_ATTACK3_WITH_HANDS,	// 오흔손 휘두르고 땅에 콩
		FSM_BRUTE_ATTACK2_WITH_HANDS,	// 준비동작후 왼손 휘두르기
		FSM_BRUTE_ATTACK1_WITH_HANDS,	// 오른손 휘두르기
		FSM_BRUTE_FALL_FORWARD_WITH_HANDS,
		FSM_BRUTE_FALL_FORWARD_AND_DIE_WITH_HANDS,
		FSM_BRUTE_SOFT_HIT_WITH_HANDS,
#pragma endregion
		FSM_BRUTE_DROWNING_LOOP,
		FSM_BRUTE_DROWNING,
		FSM_BRUTE_DIE,
#pragma region 도끼
		// 도끼
		FSM_BRUTE_WHIRL_LOOP_WITH_AXE,
		FSM_BRUTE_WHIRL_CRASH_WALL_WITH_AXE,
		FSM_BRUTE_START_AXE_WHIRL,
		FSM_BRUTE_FINISH_AXE_WHIRL,
		FSM_BRUTE_WALK_FORWARD_WITH_AXE,
		FSM_BRUTE_WALK_BACKWARD_WITH_AXE,
		FSM_BRUTE_TURN_RIGHT_WITH_AXE,
		FSM_BRUTE_TURN_LEFT_WITH_AXE,
		FSM_BRUTE_SLIME_PROPERTY_TO_AXE,
		FSM_BRUTE_THROW_SLIME_WITH_AXE,
		FSM_BRUTE_RUN_WITH_AXE,
		FSM_BRUTE_PICK_UP_SLIME_FROM_GROUND_WITH_AXE,
		FSM_BRUTE_ELECTRIFY_AXE_3,	// 으으응앙아악으으으으응응윽
		FSM_BRUTE_ELECTRIFY_AXE_2,	// 와으아그앙아악아으으아각
		FSM_BRUTE_ELECTRIFY_AXE_1,	// 윽으으극그극그그극
		FSM_BRUTE_START_ELECTRIFY_AXE,
		FSM_BRUTE_FINISH_ELECTRIFY_AXE_AND_FALL_BACKWARD,
		FSM_BRUTE_JUMP_ATTACK_WITH_AXE,
		FSM_BRUTE_IDLE_WITH_AXE,
		FSM_BRUTE_HIT_AND_FALL_WITH_AXE,
		FSM_BRUTE_HIT_AND_FALLING_WITH_AXE,
		FSM_BRUTE_WEAK_HIT_WITH_AXE,
		FSM_BRUTE_STRONG_HIT_WITH_AXE,
		FSM_BRUTE_AXE_CHOP_AND_BUTT_WITH_AXE,
		FSM_BRUTE_AXE_ATTACK_4,	// 오른쪽 위로 올려 치기 (뒤돌음)
		FSM_BRUTE_AXE_ATTACK_3,	// 뒤쪽으로 도끼 회전 공격 (뒤돌음)
		FSM_BRUTE_AXE_ATTACK_2,	// 뒤쪽으로 도끼 내려 찍기 (뒤돌음)
		FSM_BRUTE_AXE_ATTACK_1,	// 도끼 횡베기 (뒤안돔)
		FSM_BRUTE_UNKNOWN_ACTION,	// 영차...!!!
#pragma endregion
		FSM_BRUTE_THINK,
		FSM_BRUTE_FIND_PLAYER,
		FSM_BRUTE_END
	};

	enum FSM_EFFIGY_STATE {
		FSM_EFFIGY_STANDBY_FREE,
		FSM_EFFIGY_STANDBY_BS,
		FSM_EFFIGY_STANDBY_AS,
		FSM_EFFIGY_STANDBY_SOFT,
		FSM_EFFIGY_ATTACK_CLAP,
		FSM_EFFIGY_CORE_EXPOSURE_LOOP,
		FSM_EFFIGY_CORE_EXPOSURE_AS,
		FSM_EFFIGY_ATTACK_RANGED_BS,
		FSM_EFFIGY_ATTACK_RANGED_LOOP,
		FSM_EFFIGY_ATTACK_RANGED_AS,
		FSM_EFFIGY_MOVE_RUSHMOVE_LOOP,
		FSM_EFFIGY_REBRON_CUBES_REAPPEAR,
		FSM_EFFIGY_STANDBY_LOOP,
		FSM_EFFIGY_BLINK,
		FSM_EFFIGY_IGNITE_BS,
		FSM_EFFIGY_IGNITE_AS,
		FSM_EFFIGY_IGNITE_SUCCESS,
		FSM_EFFIGY_IGNITE_LOOP,
		FSM_EFFIGY_IGNITE_BS02,
		FSM_EFFIGY_CORE_EXPOSURE2_AS,
		FSM_EFFIGY_ATTACK_PILLAR,
		FSM_EFFIGY_CORE_EXPOSURE2_LOOP,
		FSM_EFFIGY_SHAKE_SHAKE,
		FSM_EFFIGY_ATTACK_ROLLING_BS,
		FSM_EFFIGY_ATTACK_ROLLING_AIMING,
		FSM_EFFIGY_ATTACK_ROLLING_LOOP,
		FSM_EFFIGY_ATTACK_ROLLING_AS,
		FSM_EFFIGY_ATTACK_TRANSFORM_1,
		FSM_EFFIGY_ATTACK_TRANSFORM_2,
		FSM_EFFIGY_ATTACK_TRANSFORM_3,
		FSM_EFFIGY_CORE_EXPOSE,
		FSM_EFFIGY_ATTACK_PUNCH,
		FSM_EFFIGY_ATTACK_SNAKE_BS,
		FSM_EFFIGY_ATTACK_SNAKE_LOOP,
		FSM_EFFIGY_ATTACK_SNAKE_AS,
		FSM_EFFIGY_ATTACK_SELF_EXPLOSION_BS,
		FSM_EFFIGY_ATTACK_SELF_EXPLOSION_LOOP,
		FSM_EFFIGY_ATTACK_SELF_EXPLOSION_EXPLODE,
		FSM_EFFIGY_STANDBY_ALERT,
		FSM_EFFIGY_HIT,
		FSM_EFFIGY_TRASH,
		FSM_EFFIGY_TRASH2,
		FSM_EFFIGY_THINK,
		FSM_EFFIGY_END
	};

	enum FSM_DVALIN_STATE {
		FSM_DVALIN_FIRST,
		FSM_DVALIN_IDLE2,			// 앞쪽
		FSM_DVALIN_IDLE,			// 뒤쪽
		FSM_DVALIN_ATTACK_GNAW_LEFT,				// 드발린 기준 왼쪽
		FSM_DVALIN_ATTACK_GNAW_RIGHT,
		FSM_DVALIN_ATTACK_BREATHELEFT,				// 드발린 기준 오른쪽
		FSM_DVALIN_ATTACK_BREATHERIGHT,
		FSM_DVALIN_ATTACK_RUSH_BACK_TO_FRONT,		// 뒤쪽 -> 앞쪽
		FSM_DVALIN_ATTACK_RUSH_FRONT_TO_BACK,		// 앞쪽 -> 뒤쪽
		FSM_DVALIN_ATTACK_FLOORCOLLAPSE_BS,
		FSM_DVALIN_ATTACK_PULSE_BOMBS,
		FSM_DVALIN_ATTACK_FLOORCOLLAPSE,
		FSM_DVALIN_ATTACK_OMEGA_BOMB,
		FSM_DVALIN_ATTACK_STARFALL,
		FSM_DVALIN_GROGGY_LOOP,
		FSM_DVALIN_GROGGY_AS,
		FSM_DVALIN_GROGGY_BS,
		FSM_DVALIN_DIE,
		FSM_DVALIN_TRASH1,
		FSM_DVALIN_TRASH2,
		FSM_DVALIN_TRASH3,
		FSM_DVALIN_TRASH4,
		FSM_DVALIN_TRASH5,
		FSM_DVALIN_TRASH6,
		FSM_DVALIN_ATTACK_RUSH_FRONT_TO_FRONT_1,	// 앞쪽 -> 앞쪽		// 자체 제작
		FSM_DVALIN_ATTACK_RUSH_FRONT_TO_FRONT_2,	// 앞쪽 -> 앞쪽		// 자체 제작
		FSM_DVALIN_THINK,				// 자체 제작
		FSM_DVALIN_END
	};

	enum FSM_ABYSS_MAGE_STATE {
		FSM_ABYSS_MAGE_BLINK_AS,
		FSM_ABYSS_MAGE_BLINK_BS,
		FSM_ABYSS_MAGE_STANDBY_BRAINWASHING,
		FSM_ABYSS_MAGE_DIE_DROWN,
		FSM_ABYSS_MAGE_DIE_FALLING_DIE,
		FSM_ABYSS_MAGE_GATHER_AS,
		FSM_ABYSS_MAGE_GATHER_BS,
		FSM_ABYSS_MAGE_GATHER_LOOP,
		FSM_ABYSS_MAGE_GETUP,
		FSM_ABYSS_MAGE_HIT_HITHEAVY,
		FSM_ABYSS_MAGE_HIT_HITLIGHT,
		FSM_ABYSS_MAGE_HIT_HITSHAKE,
		FSM_ABYSS_MAGE_HIT_HITTHROW,
		FSM_ABYSS_MAGE_HIT_HITTHROWDROP,
		FSM_ABYSS_MAGE_HIT_HITTHROWTODIE,
		FSM_ABYSS_MAGE_HIT_HITTHROWTOGROUND,
		FSM_ABYSS_MAGE_ATTACK_NORMAL_ATTACK,
		FSM_ABYSS_MAGE_STANDBY_RANDOMACTION_2,
		FSM_ABYSS_MAGE_STANDBY_RANDOMACTION_3,
		FSM_ABYSS_MAGE_STANDBY_RANDOMACTION_1,
		FSM_ABYSS_MAGE_ATTACK_SPECIAL_ATTACK,
		FSM_ABYSS_MAGE_STANDBY_DIZZY,
		FSM_ABYSS_MAGE_STANDBY_FIGHT,
		FSM_ABYSS_MAGE_STANDBY_FREE,
		FSM_ABYSS_MAGE_WALK,
		FSM_ABYSS_MAGE_WARNING,
		FSM_ABYSS_MAGE_DIE,
		FSM_ABYSS_MAGE_DIE_LOOP,
		FSM_ABYSS_MAGE_DIE_AS,
		FSM_ABYSS_MAGE_DIE_BS,
		FSM_ABYSS_MAGE_THINK,
		FSM_ABYSS_MAGE_END
	};

#pragma endregion

	enum FSM_TELEPORT_STATE {
		FSM_TELEPORT_OPEN,		FSM_TELEPORT_CLOSE,		FSM_TELEPORT_IDLE,		FSM_TELEPORT_END
	};

	enum FSM_PAIMON_STATE {
		FSM_PAIMON_GUIDE,
		FSM_PAIMON_IDLE1,		FSM_PAIMON_IDLE2,				FSM_PAIMON_IDLE3,			FSM_PAIMON_IDLE4,
		FSM_PAIMON_FLY_FAST,	FSM_PAIMON_CLAP,				FSM_PAIMON_FLY,
		FSM_PAIMON_END
	};

	enum FSM_NPC_STATE {
		FSM_NPC_IDLE,				FSM_NPC_SOLIDER_IDLE,		FSM_NPC_SOLIDER_STANDBY,
		FSM_NPC_CLAP,				FSM_NPC_PRAY,
		FSM_NPC_SOLIDER_START,		FSM_NPC_SOLIDER_LOOP,		FSM_NPC_SOLIDER_END,
		FSM_NPC_SITHAND_START,		FSM_NPC_SITHAND_LOOP,		FSM_NPC_SITHAND_END,
		FSM_NPC_AKIMBO_START,		FSM_NPC_AKIMBO_LOOP,		FSM_NPC_AKIMBO_END,
		FSM_NPC_HOLDARMHAND_START,	FSM_NPC_HOLDARMHAND_LOOP,	FSM_NPC_HOLDARMHAND_END,
		FSM_NPC_HOLDARM_START,		FSM_NPC_HOLDARM_LOOP,		FSM_NPC_HOLDARM_END,
		FSM_NPC_TALK1,				FSM_NPC_TALK2,				FSM_NPC_TALK3,
		FSM_NPC_REQUEST_START,		FSM_NPC_REQUEST_LOOP,
		FSM_NPC_TURN_START,			FSM_NPC_TURN_END,
		FSM_NPC_WALK,				FSM_NPC_RUN,
		FSM_NPC_END
	};

	enum ANIM_ANDRIUS_STATE {
		ANIM_ANDRIUS_IDLE,				ANIM_ANDRIUS_WALK,					ANIM_ANDRIUS_RUSH,
		ANIM_ANDRIUS_TURN180_LEFT,		ANIM_ANDRIUS_TURN180_RIGHT,			ANIM_ANDRIUS_HOWL_START,
		ANIM_ANDRIUS_HOWLING,			ANIM_ANDRIUS_HOWL_END,				ANIM_ANDRIUS_RUSH_START,
		ANIM_ANDRIUS_JUMP,				ANIM_ANDRIUS_SCRAM_LEFT,			ANIM_ANDRIUS_SCRAM_RIGHT,
		ANIM_ANDRIUS_BACKJUMP,			ANIM_ANDRIUS_SCRATCH_LEFT,			ANIM_ANDRIUS_SCRATCH_RIGHT,
		ANIM_ANDRIUS_JUMP_READY_LEFT,	ANIM_ANDRIUS_JUMP_READY_RIGHT,		ANIM_ANDRIUS_JUMP_READY_FRONT,
		ANIM_ANDRIUS_SWEEP_RIGHT,		ANIM_ANDRIUS_SWEEP_LEFT,			ANIM_ANDRIUS_TURN_FAST_LEFT,
		ANIM_ANDRIUS_TURN_FAST_RIGHT,	ANIM_ANDRIUS_TAILSWEEP_RIGHT,		ANIM_ANDRIUS_TAILSWEEP_LEFT,
		ANIM_ANDRIUS_IDLE_BATTLE,		ANIM_ANDRIUS_SHAKE_START,			ANIM_ANDRIUS_SHAKE,
		ANIM_ANDRIUS_SHAKE_END,			ANIM_ANDRIUS_ICICLESHOOT_RIGHT,		ANIM_ANDRIUS_ICICLESHOOT_LEFT,

		// For. Phase 2
		ANIM_ANDRIUS_ICE_SHOCK_WAVE,	ANIM_ANDRIUS_WIND_SHOCK_WAVE,		ANIM_ANDRIUS_ICE_SCRATCH_LEFT,
		ANIM_ANDRIUS_ICE_SCRATCH_RIGHT,	ANIM_ANDRIUS_IDLE_VARIATION_1,		ANIM_ANDRIUS_IDLE_VARIATION_2,
		
		ANIM_ANDRIUS_WING = 42,
		ANIM_ANDRIUS_END
	};

	enum NPC_STATE { STATE_NORMAL, STATE_DIALOGUE, STATE_CUTSCENE, NPCSTATE_END };

	enum ROTATION_DIRECTION {
		ROT_LEFT, ROT_RIGHT, ROT_END
	};

	enum PASSID_VTX			{ VTX_DEFAULT, VTX_END };
	enum PASSID_VTXTEX		{ VTXTEX_DEFAULT, VTXTEX_ALPHA, VTXTEX_UVCOLORHORIZONTAL, 
								VTXTEX_HITTING_0, VTXTEX_HITTING_1, VTXTEX_HITTING_2, VTXTEX_FLAME0, VTXTEX_FLAME1, VTXTEX_RUSH_CIRCLE, VTXTEX_ICE_FLOOR,
								VTXTEX_FOG, VTXTEX_ITEM_GLOW, VTXTEX_LIGHTWAVE,VTXTEX_PIERCING_TRAIL, VTXTEX_EFF_TRANSITION, VTXTEX_EFF_GROUND_STOMP,
								VTXTEX_EFF_IMPACT_GLOW, VTXTEX_EFF_FLAME_ENCHANT,VTXTEX_CROSS,VTXTEX_SMOKE, VTXTEX_EFF_SQUENCE, VTXTEX_EFF_WATER_FOG,
								VTXTEX_EFF_BARBARA_BURST_CIRCLE, VTXTEX_EFF_BARBARA_NORMAL_ATK_RING, VTXTEX_EFF_BARBARA_NORMAL_ATK_STAR, VTXTEX_EFF_LIQUID_SPLASH,
								VTXTEX_EFF_LIQUID_SPRAY, VTXTEX_EFF_EFFIGY_RECHARGE_TRAIL, VTXTEX_RAIDEN_SYMBOL, VTXTEX_RAIDEN_LIGHT, VTXTEX_LINE_TRAP, VTXTEX_CHIN_LIGHTNING, 
								VTXTEX_DOOR_PORTAL,
								VTXTEX_END };
	enum PASSID_VTXEFF		{ VTXEFF_FLAME, VTXEFF_END };
	enum PASSID_VTXNORTEX	{ VTXNORTEX_TERRAIN, VTXNORTEX_TERRAINWIRE, VTXNORTEX_WATER, VTXNORTEX_END };
	enum PASSID_VTXMESH		{ VTXMESH_DEFALUT, VTXMESH_NONCULL, VTXMESH_TERRAIN, VTXMESH_ZHONGLIPILLAR, VTXMESH_WIND_RANGE,
								VTXMESH_WIND_BLADE, VTXMESH_SCRATCH, VTXMESH_RUSH, VTXMESH_RUSH2,
								VTXMESH_SHADOW,VTXMESH_SP_EXPLODE, VTXMESH_EFF_SLASH, VTXMESH_BURST_BACKGROUND, 
								VTXMESH_ZHONGLI_SHIELD, VTXMESH_EFF_ELEM_SHIELD, VTXMESH_BURST_RAY, VTXMESH_SLASH_DILUC, VTXMESH_ANDRIUS_CLAW,
								VTXMESH_DILUC_FLAME_SLASH, VTXMESH_DILUC_OUTER_FLAME_SLASH, VTXMESH_FLAME_ENCHANT_CROSS, VTXMESH_TRAIL_CIRCLE,
								VTXMESH_DISSOLVE,VTXMESH_BARBARA_STAR, VTXMESH_GLIDING_RING, VTXMESH_EFFIGY_FIRECUBE, VTXMESH_ACCELERATING_RING,
								VTXMESH_EFFIGY_FIRECORE, VTXMESH_BIG_EXPLOSION, VTXMESH_MOND_SKYBOX,
								VTXMESH_EFF_DVALIN_SKYBOX, VTXMESH_DVALIN_PLATFORM_DESTROY, VTXMESH_DUNGEONPLATFORM, VTXMESH_RUNE_SEALED,
								VTXMESH_CHAKRA, VTXMESH_LIGHTNING, VTXMESH_TRAIL_TEST,
								VTXMESH_END };
	enum PASSID_VTXANIMMESH { VTXANIMMESH_DEFAULT, VTXANIMMESH_MTRAIL, VTXANIMMESH_ADDEXPOSURE, VTXANIMMESH_RAMP, VTXANIMMESH_DISSOLVE, VTXANIMMESH_RAMP_DISSOLVE,
								VTXANIMMESH_PHOENIX, VTXANIMMESH_PETRIFICATION, VTXANIMMESH_FREEZING, VTXANIMMESH_METEOR_TRAIL, VTXANIMMESH_EFF_WIND_FIELD, VTXANIMMESH_EFFIGY_FRIE,
								VTXANIMMESH_SHADOW, VTXANIMMESH_BLACKHAIR, VTXANIMMESH_BROWNHAIR, VTXANIMMESH_LIGHTBROWNHAIR, VTXANIMMESH_YELLOWBROWNHAIR, VTXANIMMESH_EFFECT_BOREAS_BODY_1, VTXANIMMESH_EFFECT_BOREAS_BODY_2,
								VTXANIMMESH_EFFECT_DVALIN_BODY, VTXANIMMESH_DUNGEONOBJECT, VTXANIMMESH_DVALIN_ENTER, VTXANIMMESH_DVALIN_ENTER_ROT, VTXANIMMESH_EFF_ACTIVATE, VTXANIMMESH_END };

	enum PASSID_UI			{ UI_DEFAULT, UI_DEFINED, UI_DUALTEX, UI_STAMINA, UI_RED_REF, UI_ITEM,UI_ELEMENT_OHD, UI_BACKGROUND, UI_CLOUD, UI_ZHONGLIBACKGROUND, UI_BARBARA_BACKGROUND,
							  UI_SKILL_ICON_BASE,UI_COOLDOWN_CIRCLE,UI_RED_ALPHA, UI_DISCARD,UI_END };
	// DefinedColor
	// DualTexture

	// 파티클 텍스쳐 인덱스	
	enum TEXINDEX_PARTICLE {
		TEX_PARTICLE_DEFAULT, TEX_PARTICLE_ICICLE, TEX_PARTICLE_FEATHER, TEX_PARTICLE_FEATHERA,
		TEX_PARTICLE_ATLAS, TEX_PARTICLE_DEBRIS_AT, TEX_PARTICLE_FIRE, TEX_PARTICLE_WDROP, TEX_PARTICLE_CROSS1,
		TEX_PARTICLE_WATERPIECE, TEX_PARTICLE_SMOKE, TEX_PARTICLE_BASESMOKE, TEX_PARTICLE_DUST, TEX_PARTICLE_HEAT_SMOKE, TEX_PARTICLE_IMPACT_SPARK,
		TEX_PARTICLE_CROSS2, TEX_PARTICLE_STAR, TEX_BARARA_RAMP,TEX_TRAILING_LINE, TEX_PARTICLE_RAIN_DROP, TEX_PARTICLE_BUBBLE, TEX_PARTICLE_PAPER,
		TEX_PARTICLE_FIRERAMP, TEX_PARTICLE_DISSOLVE, TEX_PARTICLE_SPARK,TEX_PARTICLE_DEBRIS,TEX_PARTICLE_SPLASH, TEX_PARTICLE_DVLSTARRAIN,
		TEX_PARTICLE_END };

	/* Asset Effect */
	enum PASSID_TEXFX		{ TEXFX_GLOW, TEXFX_FLARE, TEXFX_SMOKE, TEXFX_MAGICCIRCLE, TEXFX_END };
	enum PASSID_MESHFX		{ MESHFX_TORNADO, MESHFX_METEORITE, MESHFX_SHOCKWAVE, MESHFX_CIRCULARINDIGAGE, MESHFX_CIRCULARINDIBORDER, MESHFX_ELEMENTAL,
							  MESHFX_BARBARA_ES2, MESHFX_BARBARA_ES3, MESHFX_BARBARA_ES4, MESHFX_EFFIGYFIRE_CRACK, 
							  MESHFX_EFFIGYFIRE_IMPACT, MESHFX_EFFIGYFIRE_IMPACT_DISSOLVE,
							  MESHFX_EFFIGYFIRE_THORN, MESHFX_EFFIGYFIRE_INPROJ, MESHFX_EFFIGYFIRE_OUTPROJ,  MESHFX_EFFIGYFIRE_EXTENT, 
							  MESHFX_EFFIGYFIRE_EXTENTCC, MESHFX_EFFIGYFIRE_PILLAR_CRACK, MESHFX_EFFIGYFIRE_AURA,
							  MESHFX_EFFIGYFIRE_TRSCOW, MESHFX_DUNGEONEXIT_MAGICLINE, MESHFX_DUNGEONEXIT_CYLINDER, MESHFX_DUNGEONEXIT_RING,
							  MESHFX_REACTOR_ACTIVEFX,
							  MESHFX_END };
	enum PASSID_ANIMFX		{ ANIMFX_BARBARA_ES1, ANIMFX_REACTOR, ANIMFX_REACTOR_SYMBOL, ANIMFX_END };

	/* Element Type */
	enum WORLD_ELEMENT_TYPE
	{
		WORLD_ELEMENT_NONE,
		WORLD_ELEMENT_INTERACTION,
		WORLD_ELEMENT_END
	};

	enum STATUSEFFECTID {
		SE_ELECTRO_CHARGE, SE_SUPERCONDUCT,
		SE_BARABRA_ES, SE_ZHONGLI_SHIELD, SE_ELEMENT_SHILED,
		SE_END
	};

	enum LOCATIONID { LOCATION_MOND_CASTLE, LOCATION_MOND_FIELD, LOCATION_END };
}